meta {
  name: Returns the whole road network address listing ("summary") for current, or historical road network.
  type: http
  seq: 1
}

get {
  url: {{baseUrl}}/api/viite/integration/summary
  body: none
  auth: none
}

params:query {
  ~since: 1989-01-01
  ~since: {{since_var}}
}

headers {
  X-API-Key: {{X-API-Key}}
}

vars:pre-request {
  since_var: 1989-01-01
}

assert {
  res.status: eq 200
  res.statusText: eq OK
  res.responseTime: lte 10000
}

tests {
  
  const { common_schema_test_for_response_data_and_schema_js_file, parse_test_data_from_json_file } = require('./tests/common_tests/common_schema_test_for_all.js');
  const { common_tests_for_all } = require('./tests/common_tests/common_tests_for_all.js');
  const { common_tests_for_valid_credentials } = require('./tests/common_tests/common_tests_for_valid_credentials.js');
    
  const data = res.body;
  // const data = parse_test_data_from_json_file('./tests/api/viite/integration/summary', 'test_data_for_valid_credentials.json'); 
  
  common_schema_test_for_response_data_and_schema_js_file(data, './tests/api/viite/integration/summary', 'schema_for_valid_credentials.js'); 
  common_tests_for_all(); 
  common_tests_for_valid_credentials();

  const check_track_lengths = (data) => {
    const mismatchedRoads = [];
  
    for (const road of data) {
      let track_1_total_length = 0;
      let track_2_total_length = 0;
  
      for (const roadpart of road.roadparts) {
        for (const track of roadpart.tracks) {
          const length = track.endaddressM - track.startaddressM;
  
          if (track.track === 1) {
            track_1_total_length += length;
          } else if (track.track === 2) {
            track_2_total_length += length;
          }
        }
      }
  
      if (track_1_total_length !== track_2_total_length) {
        mismatchedRoads.push(`Roadnumber ${road.roadnumber}: Track 1 total length is ${track_1_total_length}, Track 2 total length is ${track_2_total_length}`);
      }
    }
  
    if (mismatchedRoads.length > 0) {
      return {
        success: false,
        message: mismatchedRoads.join('\n')
      };
    } else {
      return {
        success: true,
        message: 'All track lengths match.'
      };
    }
  };

  test('Tracks 1 and 2 are of equal length', async () => {
    const result = check_track_lengths(data);
    assert.equal(result.success, true, result.message);
  });
  
}
